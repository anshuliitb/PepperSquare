{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/preview/components/PreviewContent.tsx", "../../../@strapi/content-manager/admin/src/preview/components/PreviewHeader.tsx", "../../../@strapi/content-manager/admin/src/preview/pages/Preview.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Box, Flex, IconButton } from '@strapi/design-system';\nimport { ArrowLeft } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { FormLayout } from '../../pages/EditView/components/FormLayout';\nimport { usePreviewContext } from '../pages/Preview';\n\n// TODO use ArrowLineLeft once it's available in the DS\nconst AnimatedArrow = styled(ArrowLeft)<{ isSideEditorOpen: boolean }>`\n  will-change: transform;\n  rotate: ${(props) => (props.isSideEditorOpen ? '0deg' : '180deg')};\n  transition: rotate 0.2s ease-in-out;\n`;\n\nconst UnstablePreviewContent = () => {\n  const previewUrl = usePreviewContext('PreviewContent', (state) => state.url);\n  const layout = usePreviewContext('PreviewContent', (state) => state.layout);\n\n  const { formatMessage } = useIntl();\n\n  const [isSideEditorOpen, setIsSideEditorOpen] = React.useState(true);\n\n  return (\n    <Flex flex={1} overflow=\"auto\" alignItems=\"stretch\">\n      <Box\n        overflow=\"auto\"\n        width={isSideEditorOpen ? '50%' : 0}\n        borderWidth=\"0 1px 0 0\"\n        borderColor=\"neutral150\"\n        paddingTop={6}\n        paddingBottom={6}\n        // Remove horizontal padding when the editor is closed or it won't fully disappear\n        paddingLeft={isSideEditorOpen ? 6 : 0}\n        paddingRight={isSideEditorOpen ? 6 : 0}\n        transition=\"all 0.2s ease-in-out\"\n      >\n        <FormLayout layout={layout.layout} hasBackground />\n      </Box>\n      <Box position=\"relative\" flex={1} height=\"100%\" overflow=\"hidden\">\n        <Box\n          src={previewUrl}\n          /**\n           * For some reason, changing an iframe's src tag causes the browser to add a new item in the\n           * history stack. This is an issue for us as it means clicking the back button will not let us\n           * go back to the edit view. To fix it, we need to trick the browser into thinking this is a\n           * different iframe when the preview URL changes. So we set a key prop to force React\n           * to mount a different node when the src changes.\n           */\n          key={previewUrl}\n          title={formatMessage({\n            id: 'content-manager.preview.panel.title',\n            defaultMessage: 'Preview',\n          })}\n          width=\"100%\"\n          height=\"100%\"\n          borderWidth={0}\n          tag=\"iframe\"\n        />\n        <IconButton\n          variant=\"tertiary\"\n          label={formatMessage(\n            isSideEditorOpen\n              ? {\n                  id: 'content-manager.preview.content.close-editor',\n                  defaultMessage: 'Close editor',\n                }\n              : {\n                  id: 'content-manager.preview.content.open-editor',\n                  defaultMessage: 'Open editor',\n                }\n          )}\n          onClick={() => setIsSideEditorOpen((prev) => !prev)}\n          position=\"absolute\"\n          top={2}\n          left={2}\n        >\n          <AnimatedArrow isSideEditorOpen={isSideEditorOpen} />\n        </IconButton>\n      </Box>\n    </Flex>\n  );\n};\n\nconst PreviewContent = () => {\n  const previewUrl = usePreviewContext('PreviewContent', (state) => state.url);\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box\n      src={previewUrl}\n      /**\n       * For some reason, changing an iframe's src tag causes the browser to add a new item in the\n       * history stack. This is an issue for us as it means clicking the back button will not let us\n       * go back to the edit view. To fix it, we need to trick the browser into thinking this is a\n       * different iframe when the preview URL changes. So we set a key prop to force React\n       * to mount a different node when the src changes.\n       */\n      key={previewUrl}\n      title={formatMessage({\n        id: 'content-manager.preview.panel.title',\n        defaultMessage: 'Preview',\n      })}\n      width=\"100%\"\n      height=\"100%\"\n      borderWidth={0}\n      tag=\"iframe\"\n    />\n  );\n};\n\nexport { PreviewContent, UnstablePreviewContent };\n", "import * as React from 'react';\n\nimport {\n  DescriptionComponentRenderer,\n  useClipboard,\n  useHistory,\n  useNotification,\n  useQueryParams,\n  useStrapiApp,\n} from '@strapi/admin/strapi-admin';\nimport { IconButton, Tabs, Typography, Grid, Flex } from '@strapi/design-system';\nimport { Cross, Link as LinkIcon } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link, type To } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { InjectionZone } from '../../components/InjectionZone';\nimport { DocumentActionButton } from '../../pages/EditView/components/DocumentActions';\nimport { DocumentStatus } from '../../pages/EditView/components/DocumentStatus';\nimport { getDocumentStatus } from '../../pages/EditView/EditViewPage';\nimport { usePreviewContext } from '../pages/Preview';\n\nimport type { ContentManagerPlugin, DocumentActionProps } from '../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * ClosePreviewButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst ClosePreviewButton = () => {\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n  }>();\n  const { formatMessage } = useIntl();\n\n  const canGoBack = useHistory('BackButton', (state) => state.canGoBack);\n  const goBack = useHistory('BackButton', (state) => state.goBack);\n  const history = useHistory('BackButton', (state) => state.history);\n  const locationIndex = useHistory('BackButton', (state) => state.currentLocationIndex);\n\n  /**\n   * Get the link destination from the history.\n   * Rely on a fallback (the parent edit view page) if there's no page to go back .\n   */\n  const historyTo = canGoBack ? history.at(locationIndex - 2) : undefined;\n  const fallback = {\n    pathname: '..',\n    search: stringify(query, { encode: false }),\n  } satisfies To;\n  const toWithFallback = historyTo ?? fallback;\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (canGoBack) {\n      // Prevent normal link behavior, go back in the history stack instead\n      e.preventDefault();\n      goBack();\n      return;\n    }\n\n    // Otherwise rely on native link behavior to go back to the edit view. We don't use navigate()\n    // here in order to get the relative=\"path\" functionality from the Link component.\n  };\n\n  return (\n    <IconButton\n      variant=\"ghost\"\n      tag={Link}\n      relative=\"path\"\n      to={toWithFallback}\n      onClick={handleClick}\n      label={formatMessage({\n        id: 'content-manager.preview.header.close',\n        defaultMessage: 'Close preview',\n      })}\n    >\n      <Cross />\n    </IconButton>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Status\n * -----------------------------------------------------------------------------------------------*/\n\nconst Status = () => {\n  // Get status\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const hasDraftAndPublished = schema?.options?.draftAndPublish ?? false;\n\n  if (!hasDraftAndPublished) {\n    return null;\n  }\n\n  const status = getDocumentStatus(document, meta);\n\n  return <DocumentStatus status={status} size=\"XS\" />;\n};\n\nconst PreviewTabs = () => {\n  const { formatMessage } = useIntl();\n\n  // URL query params\n  const [{ query }, setQuery] = useQueryParams<{ status: 'draft' | 'published' }>();\n\n  // Get status\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const hasDraftAndPublish = schema?.options?.draftAndPublish ?? false;\n  const documentStatus = getDocumentStatus(document, meta);\n\n  const handleTabChange = (status: string) => {\n    if (status === 'published' || status === 'draft') {\n      setQuery({ status }, 'push', true);\n    }\n  };\n\n  if (!hasDraftAndPublish) {\n    return null;\n  }\n\n  return (\n    <Tabs.Root variant=\"simple\" value={query.status || 'draft'} onValueChange={handleTabChange}>\n      <Tabs.List\n        aria-label={formatMessage({\n          id: 'preview.tabs.label',\n          defaultMessage: 'Document status',\n        })}\n      >\n        <StatusTab value=\"draft\">\n          {formatMessage({\n            id: 'content-manager.containers.List.draft',\n            defaultMessage: 'draft',\n          })}\n        </StatusTab>\n        <StatusTab value=\"published\" disabled={documentStatus === 'draft'}>\n          {formatMessage({\n            id: 'content-manager.containers.List.published',\n            defaultMessage: 'published',\n          })}\n        </StatusTab>\n      </Tabs.List>\n    </Tabs.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst UnstablePreviewHeader = () => {\n  const title = usePreviewContext('PreviewHeader', (state) => state.title);\n  const document = usePreviewContext('PreviewHeader', (state) => state.document);\n  const schema = usePreviewContext('PreviewHeader', (state) => state.schema);\n  const meta = usePreviewContext('PreviewHeader', (state) => state.meta);\n  const plugins = useStrapiApp('PreviewHeader', (state) => state.plugins);\n\n  const [{ query }] = useQueryParams<{\n    status?: 'draft' | 'published';\n  }>();\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { copy } = useClipboard();\n\n  const handleCopyLink = () => {\n    copy(window.location.href);\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.preview.copy.success',\n        defaultMessage: 'Copied preview link',\n      }),\n      type: 'success',\n    });\n  };\n\n  const hasDraftAndPublish = schema.options?.draftAndPublish ?? false;\n  const props = {\n    activeTab: query.status ?? null,\n    collectionType: schema.kind === 'collectionType' ? 'collection-types' : 'single-types',\n    model: schema.uid,\n    documentId: document.documentId,\n    document,\n    meta,\n  } satisfies DocumentActionProps;\n\n  return (\n    <Flex height=\"48px\" gap={4} background=\"neutral0\" borderColor=\"neutral150\" tag=\"header\">\n      {/* Title and status */}\n      <TitleContainer height=\"100%\" paddingLeft={2} paddingRight={4}>\n        <ClosePreviewButton />\n        <PreviewTitle\n          tag=\"h1\"\n          title={title}\n          maxWidth=\"200px\"\n          fontSize={2}\n          paddingLeft={2}\n          paddingRight={3}\n          fontWeight={600}\n        >\n          {title}\n        </PreviewTitle>\n        <Status />\n      </TitleContainer>\n\n      {/* Tabs and actions */}\n      <Flex\n        flex={1}\n        paddingRight={2}\n        gap={2}\n        justifyContent={hasDraftAndPublish ? 'space-between' : 'flex-end'}\n      >\n        <Flex flex=\"1 1 70%\">\n          <PreviewTabs />\n        </Flex>\n        <Flex gap={2}>\n          <IconButton\n            type=\"button\"\n            label={formatMessage({\n              id: 'preview.copy.label',\n              defaultMessage: 'Copy preview link',\n            })}\n            onClick={handleCopyLink}\n          >\n            <LinkIcon />\n          </IconButton>\n          <InjectionZone area=\"preview.actions\" />\n          <DescriptionComponentRenderer\n            props={props}\n            descriptions={(\n              plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n            ).getDocumentActions('preview')}\n          >\n            {(actions) => {\n              const filteredActions = actions.filter((action) =>\n                [action.position].flat().includes('preview')\n              );\n              const [primaryAction, secondaryAction] = filteredActions;\n\n              if (!primaryAction && !secondaryAction) return null;\n\n              // Both actions are available when draft and publish enabled\n              if (primaryAction && secondaryAction) {\n                return (\n                  <>\n                    {/* Save */}\n                    <DocumentActionButton\n                      {...secondaryAction}\n                      variant={secondaryAction.variant || 'secondary'}\n                    />\n                    {/* Publish */}\n                    <DocumentActionButton\n                      {...primaryAction}\n                      variant={primaryAction.variant || 'default'}\n                    />\n                  </>\n                );\n              }\n\n              // Otherwise we just have the save action\n              return (\n                <DocumentActionButton\n                  {...primaryAction}\n                  variant={primaryAction.variant || 'secondary'}\n                />\n              );\n            }}\n          </DescriptionComponentRenderer>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst PreviewHeader = () => {\n  // Get the document title\n  const title = usePreviewContext('PreviewHeader', (state) => state.title);\n\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { copy } = useClipboard();\n\n  const handleCopyLink = () => {\n    copy(window.location.href);\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.preview.copy.success',\n        defaultMessage: 'Copied preview link',\n      }),\n      type: 'success',\n    });\n  };\n\n  return (\n    <Grid.Root\n      gap={3}\n      gridCols={3}\n      paddingLeft={2}\n      paddingRight={2}\n      background=\"neutral0\"\n      borderColor=\"neutral150\"\n      tag=\"header\"\n    >\n      {/* Title and status */}\n      <Grid.Item xs={1} paddingTop={2} paddingBottom={2} gap={3}>\n        <ClosePreviewButton />\n        <PreviewTitle tag=\"h1\" fontWeight={600} fontSize={2} maxWidth=\"200px\" title={title}>\n          {title}\n        </PreviewTitle>\n        <Status />\n      </Grid.Item>\n      {/* Tabs */}\n      <Grid.Item xs={1} marginBottom=\"-1px\" alignItems=\"end\" margin=\"auto\">\n        <PreviewTabs />\n      </Grid.Item>\n      {/* Copy link */}\n      <Grid.Item xs={1} justifyContent=\"end\" paddingTop={2} paddingBottom={2}>\n        <IconButton\n          type=\"button\"\n          label={formatMessage({\n            id: 'preview.copy.label',\n            defaultMessage: 'Copy preview link',\n          })}\n          onClick={handleCopyLink}\n        >\n          <LinkIcon />\n        </IconButton>\n      </Grid.Item>\n    </Grid.Root>\n  );\n};\n\nconst PreviewTitle = styled(Typography)`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst StatusTab = styled(Tabs.Trigger)`\n  text-transform: uppercase;\n`;\n\nconst TitleContainer = styled(Flex)`\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nexport { PreviewHeader, UnstablePreviewHeader };\n", "import * as React from 'react';\n\nimport {\n  Page,\n  useQueryParams,\n  useRBAC,\n  createContext,\n  Form as FormContext,\n} from '@strapi/admin/strapi-admin';\nimport { Box, Flex, FocusTrap, Portal } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useParams } from 'react-router-dom';\n\nimport { GetPreviewUrl } from '../../../../shared/contracts/preview';\nimport { COLLECTION_TYPES } from '../../constants/collections';\nimport { DocumentRBAC } from '../../features/DocumentRBAC';\nimport { type UseDocument, useDocument } from '../../hooks/useDocument';\nimport { type EditLayout, useDocumentLayout } from '../../hooks/useDocumentLayout';\nimport { buildValidParams } from '../../utils/api';\nimport { createYupSchema } from '../../utils/validation';\nimport { PreviewContent, UnstablePreviewContent } from '../components/PreviewContent';\nimport { PreviewHeader, UnstablePreviewHeader } from '../components/PreviewHeader';\nimport { useGetPreviewUrlQuery } from '../services/preview';\n\nimport type { UID } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PreviewContextValue {\n  url: string;\n  title: string;\n  document: NonNullable<ReturnType<UseDocument>['document']>;\n  meta: NonNullable<ReturnType<UseDocument>['meta']>;\n  schema: NonNullable<ReturnType<UseDocument>['schema']>;\n  layout: EditLayout;\n}\n\nconst [PreviewProvider, usePreviewContext] = createContext<PreviewContextValue>('PreviewPage');\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst PreviewPage = () => {\n  const location = useLocation();\n  const { formatMessage } = useIntl();\n\n  // Read all the necessary data from the URL to find the right preview URL\n  const {\n    slug: model,\n    id: documentId,\n    collectionType,\n  } = useParams<{\n    slug: UID.ContentType;\n    id: string;\n    collectionType: string;\n  }>();\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n    status?: string;\n  }>();\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  if (!collectionType) {\n    throw new Error('Could not find collectionType in url params');\n  }\n\n  if (!model) {\n    throw new Error('Could not find model in url params');\n  }\n\n  // Only collection types must have a documentId\n  if (collectionType === COLLECTION_TYPES && !documentId) {\n    throw new Error('Could not find documentId in url params');\n  }\n\n  const previewUrlResponse = useGetPreviewUrlQuery({\n    params: {\n      contentType: model,\n    },\n    query: {\n      documentId,\n      locale: params.locale,\n      status: params.status as GetPreviewUrl.Request['query']['status'],\n    },\n  });\n\n  const documentResponse = useDocument({\n    model,\n    collectionType,\n    documentId,\n    params,\n  });\n\n  const documentLayoutResponse = useDocumentLayout(model);\n\n  if (\n    documentResponse.isLoading ||\n    previewUrlResponse.isLoading ||\n    documentLayoutResponse.isLoading\n  ) {\n    return <Page.Loading />;\n  }\n\n  const initialValues = documentResponse.getInitialFormValues();\n\n  if (\n    previewUrlResponse.error ||\n    documentLayoutResponse.error ||\n    !documentResponse.document ||\n    !documentResponse.meta ||\n    !documentResponse.schema ||\n    !initialValues\n  ) {\n    return <Page.Error />;\n  }\n\n  if (!previewUrlResponse.data?.data?.url) {\n    return <Page.NoData />;\n  }\n\n  const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);\n\n  const validateSync = (values: Record<string, unknown>, options: Record<string, string>) => {\n    const yupSchema = createYupSchema(\n      documentResponse.schema?.attributes,\n      documentResponse.components,\n      {\n        status: documentResponse.document?.status,\n        ...options,\n      }\n    );\n\n    return yupSchema.validateSync(values, { abortEarly: false });\n  };\n\n  return (\n    <>\n      <Page.Title>\n        {formatMessage(\n          {\n            id: 'content-manager.preview.page-title',\n            defaultMessage: '{contentType} preview',\n          },\n          {\n            contentType: documentTitle,\n          }\n        )}\n      </Page.Title>\n      <PreviewProvider\n        url={previewUrlResponse.data.data.url}\n        document={documentResponse.document}\n        title={documentTitle}\n        meta={documentResponse.meta}\n        schema={documentResponse.schema}\n        layout={documentLayoutResponse.edit}\n      >\n        <FormContext\n          method=\"PUT\"\n          disabled={\n            query.status === 'published' &&\n            documentResponse &&\n            documentResponse.document.status === 'published'\n          }\n          initialValues={documentResponse.getInitialFormValues()}\n          initialErrors={location?.state?.forceValidation ? validateSync(initialValues, {}) : {}}\n          height=\"100%\"\n          validate={(values: Record<string, unknown>, options: Record<string, string>) => {\n            const yupSchema = createYupSchema(\n              documentResponse.schema?.attributes,\n              documentResponse.components,\n              {\n                status: documentResponse.document?.status,\n                ...options,\n              }\n            );\n\n            return yupSchema.validate(values, { abortEarly: false });\n          }}\n        >\n          <Flex direction=\"column\" height=\"100%\" alignItems=\"stretch\">\n            {window.strapi.future.isEnabled('unstablePreviewSideEditor') ? (\n              <>\n                <UnstablePreviewHeader />\n                <UnstablePreviewContent />\n              </>\n            ) : (\n              <>\n                <PreviewHeader />\n                <PreviewContent />\n              </>\n            )}\n          </Flex>\n        </FormContext>\n      </PreviewProvider>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedPreviewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedPreviewPageImpl = () => {\n  const { slug: model } = useParams<{\n    slug: string;\n  }>();\n  const {\n    permissions = [],\n    isLoading,\n    error,\n  } = useRBAC([\n    { action: 'plugin::content-manager.explorer.read', subject: model },\n    { action: 'plugin::content-manager.explorer.update', subject: model },\n    { action: 'plugin::content-manager.explorer.publish', subject: model },\n  ]);\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (error || !model) {\n    return (\n      <Box\n        height=\"100vh\"\n        width=\"100vw\"\n        position=\"fixed\"\n        top={0}\n        left={0}\n        zIndex={2}\n        background=\"neutral0\"\n      >\n        <Page.Error />\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      height=\"100vh\"\n      width=\"100vw\"\n      position=\"fixed\"\n      top={0}\n      left={0}\n      zIndex={2}\n      background=\"neutral0\"\n    >\n      <Page.Protect\n        permissions={permissions.filter((permission) =>\n          permission.action.includes('explorer.read')\n        )}\n      >\n        <DocumentRBAC permissions={permissions}>\n          <PreviewPage />\n        </DocumentRBAC>\n      </Page.Protect>\n    </Box>\n  );\n};\n\nconst ProtectedPreviewPage = () => {\n  return (\n    <Portal>\n      <FocusTrap>\n        <ProtectedPreviewPageImpl />\n      </FocusTrap>\n    </Portal>\n  );\n};\n\nexport { ProtectedPreviewPage, usePreviewContext };\n"],
  "mappings": "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",
  "names": ["AnimatedArrow", "styled", "ArrowLeft", "props", "isSideEditorOpen", "UnstablePreviewContent", "previewUrl", "usePreviewContext", "state", "url", "layout", "formatMessage", "useIntl", "setIsSideEditorOpen", "useState", "_jsxs", "Flex", "flex", "overflow", "alignItems", "_jsx", "Box", "width", "borderWidth", "borderColor", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "transition", "FormLayout", "hasBackground", "position", "height", "src", "title", "id", "defaultMessage", "tag", "IconButton", "variant", "label", "onClick", "prev", "top", "left", "PreviewContent", "ClosePreviewButton", "query", "useQueryParams", "canGoBack", "useHistory", "goBack", "history", "locationIndex", "currentLocationIndex", "historyTo", "at", "undefined", "fallback", "pathname", "search", "stringify", "encode", "toWithFallback", "handleClick", "e", "preventDefault", "Link", "relative", "to", "Cross", "Status", "document", "schema", "meta", "hasDraftAndPublished", "options", "draftAndPublish", "status", "getDocumentStatus", "DocumentStatus", "size", "PreviewTabs", "setQuery", "hasDraftAndPublish", "documentStatus", "handleTabChange", "Tabs", "Root", "value", "onValueChange", "List", "aria-label", "StatusTab", "disabled", "UnstablePreviewHeader", "plugins", "useStrapiApp", "toggleNotification", "useNotification", "copy", "useClipboard", "handleCopyLink", "window", "location", "href", "message", "type", "activeTab", "collectionType", "kind", "model", "uid", "documentId", "gap", "background", "TitleContainer", "PreviewTitle", "maxWidth", "fontSize", "fontWeight", "justifyContent", "LinkIcon", "InjectionZone", "area", "DescriptionComponentRenderer", "descriptions", "apis", "getDocumentActions", "actions", "filteredActions", "filter", "action", "flat", "includes", "primaryAction", "secondaryAction", "_Fragment", "DocumentActionButton", "PreviewHeader", "Grid", "gridCols", "Item", "xs", "marginBottom", "margin", "Typography", "Trigger", "theme", "colors", "neutral150", "PreviewProvider", "createContext", "PreviewPage", "useLocation", "slug", "useParams", "params", "useMemo", "buildValidParams", "Error", "COLLECTION_TYPES", "previewUrlResponse", "useGetPreviewUrlQuery", "contentType", "locale", "documentResponse", "useDocument", "documentLayoutResponse", "useDocumentLayout", "isLoading", "Page", "Loading", "initialValues", "getInitialFormValues", "error", "data", "NoData", "documentTitle", "getTitle", "edit", "settings", "mainField", "validateSync", "values", "yupSchema", "createYupSchema", "attributes", "components", "abortEarly", "Title", "FormContext", "method", "initialErrors", "forceValidation", "validate", "direction", "strapi", "future", "isEnabled", "ProtectedPreviewPageImpl", "permissions", "useRBAC", "subject", "zIndex", "Protect", "permission", "DocumentRBAC", "ProtectedPreviewPage", "Portal", "FocusTrap"]
}
